<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationprotectioncontainers/{}/replicationmigrationitems/{}" version="2022-08-01" swagger="mgmt-plane/recoveryservicessiterecovery/ResourceProviders/Microsoft.RecoveryServices/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuUmVjb3ZlcnlTZXJ2aWNlcy92YXVsdHMve3Jlc291cmNlTmFtZX0vcmVwbGljYXRpb25GYWJyaWNzL3tmYWJyaWNOYW1lfS9yZXBsaWNhdGlvblByb3RlY3Rpb25Db250YWluZXJzL3twcm90ZWN0aW9uQ29udGFpbmVyTmFtZX0vcmVwbGljYXRpb25NaWdyYXRpb25JdGVtcy97bWlncmF0aW9uSXRlbU5hbWV9/V/MjAyMi0wOC0wMQ=="/>
  <commandGroup name="site-recovery fabric protection-container migration-item">
    <command name="show" version="2022-08-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationprotectioncontainers/{}/replicationmigrationitems/{}" version="2022-08-01" swagger="mgmt-plane/recoveryservicessiterecovery/ResourceProviders/Microsoft.RecoveryServices/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuUmVjb3ZlcnlTZXJ2aWNlcy92YXVsdHMve3Jlc291cmNlTmFtZX0vcmVwbGljYXRpb25GYWJyaWNzL3tmYWJyaWNOYW1lfS9yZXBsaWNhdGlvblByb3RlY3Rpb25Db250YWluZXJzL3twcm90ZWN0aW9uQ29udGFpbmVyTmFtZX0vcmVwbGljYXRpb25NaWdyYXRpb25JdGVtcy97bWlncmF0aW9uSXRlbU5hbWV9/V/MjAyMi0wOC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.fabricName" options="fabric-name" required="True" idPart="child_name_1">
          <help short="Fabric unique name."/>
        </arg>
        <arg type="string" var="$Path.migrationItemName" options="migration-item-name name n" required="True" idPart="child_name_3">
          <help short="Migration item name."/>
        </arg>
        <arg type="string" var="$Path.protectionContainerName" options="protection-container-name protection-container" required="True" idPart="child_name_2">
          <help short="Protection container name."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.resourceName" options="vault-name" required="True" group="" idPart="name">
          <help short="The name of the recovery services vault."/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="ReplicationMigrationItems_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}">
          <request method="get">
            <path>
              <param type="string" name="fabricName" arg="$Path.fabricName" required="True"/>
              <param type="string" name="migrationItemName" arg="$Path.migrationItemName" required="True"/>
              <param type="string" name="protectionContainerName" arg="$Path.protectionContainerName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="resourceName" arg="$Path.resourceName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-08-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/replicationFabrics/{}/replicationProtectionContainers/{}/replicationMigrationItems/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop readOnly="True" type="array<string>" name="allowedOperations">
                      <item type="string">
                        <enum>
                          <item value="&quot;DisableMigration&quot;"/>
                          <item value="&quot;Migrate&quot;"/>
                          <item value="&quot;PauseReplication&quot;"/>
                          <item value="&quot;ResumeReplication&quot;"/>
                          <item value="&quot;StartResync&quot;"/>
                          <item value="&quot;TestMigrate&quot;"/>
                          <item value="&quot;TestMigrateCleanup&quot;"/>
                        </enum>
                      </item>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="criticalJobHistory">
                      <item type="object">
                        <prop readOnly="True" type="string" name="jobId"/>
                        <prop readOnly="True" type="string" name="jobName"/>
                        <prop readOnly="True" type="string" name="jobStatus"/>
                        <prop readOnly="True" type="dateTime" name="startTime"/>
                      </item>
                    </prop>
                    <prop type="object" name="currentJob">
                      <prop readOnly="True" type="string" name="jobId"/>
                      <prop readOnly="True" type="string" name="jobName"/>
                      <prop readOnly="True" type="dateTime" name="startTime"/>
                    </prop>
                    <prop readOnly="True" type="string" name="eventCorrelationId"/>
                    <prop readOnly="True" type="string" name="health">
                      <enum>
                        <item value="&quot;Critical&quot;"/>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;Normal&quot;"/>
                        <item value="&quot;Warning&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="healthErrors">
                      <item type="object">
                        <prop type="dateTime" name="creationTimeUtc"/>
                        <prop type="string" name="customerResolvability">
                          <enum>
                            <item value="&quot;Allowed&quot;"/>
                            <item value="&quot;NotAllowed&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="entityId"/>
                        <prop type="string" name="errorCategory"/>
                        <prop type="string" name="errorCode"/>
                        <prop type="string" name="errorId"/>
                        <prop type="string" name="errorLevel"/>
                        <prop type="string" name="errorMessage"/>
                        <prop type="string" name="errorSource"/>
                        <prop type="string" name="errorType"/>
                        <prop type="array<object>" name="innerHealthErrors">
                          <item type="object">
                            <prop type="dateTime" name="creationTimeUtc"/>
                            <prop type="string" name="customerResolvability">
                              <enum>
                                <item value="&quot;Allowed&quot;"/>
                                <item value="&quot;NotAllowed&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="entityId"/>
                            <prop type="string" name="errorCategory"/>
                            <prop type="string" name="errorCode"/>
                            <prop type="string" name="errorId"/>
                            <prop type="string" name="errorLevel"/>
                            <prop type="string" name="errorMessage"/>
                            <prop type="string" name="errorSource"/>
                            <prop type="string" name="errorType"/>
                            <prop type="string" name="possibleCauses"/>
                            <prop type="string" name="recommendedAction"/>
                            <prop type="string" name="recoveryProviderErrorMessage"/>
                            <prop type="string" name="summaryMessage"/>
                          </item>
                        </prop>
                        <prop type="string" name="possibleCauses"/>
                        <prop type="string" name="recommendedAction"/>
                        <prop type="string" name="recoveryProviderErrorMessage"/>
                        <prop type="string" name="summaryMessage"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="lastMigrationStatus"/>
                    <prop readOnly="True" type="dateTime" name="lastMigrationTime"/>
                    <prop readOnly="True" type="string" name="lastTestMigrationStatus"/>
                    <prop readOnly="True" type="dateTime" name="lastTestMigrationTime"/>
                    <prop readOnly="True" type="string" name="machineName"/>
                    <prop readOnly="True" type="string" name="migrationState">
                      <enum>
                        <item value="&quot;DisableMigrationFailed&quot;"/>
                        <item value="&quot;DisableMigrationInProgress&quot;"/>
                        <item value="&quot;EnableMigrationFailed&quot;"/>
                        <item value="&quot;EnableMigrationInProgress&quot;"/>
                        <item value="&quot;InitialSeedingFailed&quot;"/>
                        <item value="&quot;InitialSeedingInProgress&quot;"/>
                        <item value="&quot;MigrationCompletedWithInformation&quot;"/>
                        <item value="&quot;MigrationFailed&quot;"/>
                        <item value="&quot;MigrationInProgress&quot;"/>
                        <item value="&quot;MigrationPartiallySucceeded&quot;"/>
                        <item value="&quot;MigrationSucceeded&quot;"/>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;ProtectionSuspended&quot;"/>
                        <item value="&quot;Replicating&quot;"/>
                        <item value="&quot;ResumeInProgress&quot;"/>
                        <item value="&quot;ResumeInitiated&quot;"/>
                        <item value="&quot;SuspendingProtection&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="migrationStateDescription"/>
                    <prop readOnly="True" type="string" name="policyFriendlyName"/>
                    <prop readOnly="True" type="string" name="policyId"/>
                    <prop type="object" name="providerSpecificDetails">
                      <prop type="string" name="instanceType" required="True">
                        <enum>
                          <item value="&quot;VMwareCbt&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="instanceType" value="VMwareCbt">
                        <prop readOnly="True" type="string" name="dataMoverRunAsAccountId"/>
                        <prop readOnly="True" type="string" name="firmwareType"/>
                        <prop readOnly="True" type="integer32" name="initialSeedingProgressPercentage"/>
                        <prop readOnly="True" type="integer64" name="initialSeedingRetryCount"/>
                        <prop readOnly="True" type="string" name="lastRecoveryPointId"/>
                        <prop readOnly="True" type="dateTime" name="lastRecoveryPointReceived"/>
                        <prop type="string" name="licenseType"/>
                        <prop readOnly="True" type="integer32" name="migrationProgressPercentage"/>
                        <prop readOnly="True" type="string" name="migrationRecoveryPointId"/>
                        <prop readOnly="True" type="string" name="osType"/>
                        <prop type="string" name="performAutoResync"/>
                        <prop type="array<object>" name="protectedDisks">
                          <item type="object">
                            <prop readOnly="True" type="integer64" name="capacityInBytes"/>
                            <prop readOnly="True" type="string" name="diskEncryptionSetId"/>
                            <prop readOnly="True" type="string" name="diskId"/>
                            <prop readOnly="True" type="string" name="diskName"/>
                            <prop readOnly="True" type="string" name="diskPath"/>
                            <prop type="string" name="diskType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;StandardSSD_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                              </enum>
                            </prop>
                            <prop readOnly="True" type="string" name="isOSDisk"/>
                            <prop readOnly="True" type="string" name="logStorageAccountId"/>
                            <prop readOnly="True" type="string" name="logStorageAccountSasSecretName"/>
                            <prop readOnly="True" type="string" name="seedBlobUri"/>
                            <prop readOnly="True" type="string" name="seedManagedDiskId"/>
                            <prop readOnly="True" type="string" name="targetBlobUri"/>
                            <prop type="string" name="targetDiskName"/>
                            <prop readOnly="True" type="string" name="targetManagedDiskId"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="integer32" name="resumeProgressPercentage"/>
                        <prop readOnly="True" type="integer64" name="resumeRetryCount"/>
                        <prop readOnly="True" type="integer32" name="resyncProgressPercentage"/>
                        <prop readOnly="True" type="string" name="resyncRequired"/>
                        <prop readOnly="True" type="integer64" name="resyncRetryCount"/>
                        <prop readOnly="True" type="string" name="resyncState">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;PreparedForResynchronization&quot;"/>
                            <item value="&quot;StartedResynchronization&quot;"/>
                          </enum>
                        </prop>
                        <prop type="object" name="seedDiskTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="snapshotRunAsAccountId"/>
                        <prop type="string" name="sqlServerLicenseType"/>
                        <prop readOnly="True" type="string" name="storageAccountId"/>
                        <prop type="string" name="targetAvailabilitySetId"/>
                        <prop type="string" name="targetAvailabilityZone"/>
                        <prop type="string" name="targetBootDiagnosticsStorageAccountId"/>
                        <prop type="object" name="targetDiskTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="targetGeneration"/>
                        <prop readOnly="True" type="string" name="targetLocation"/>
                        <prop type="string" name="targetNetworkId"/>
                        <prop type="object" name="targetNicTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="targetProximityPlacementGroupId"/>
                        <prop type="string" name="targetResourceGroupId"/>
                        <prop type="string" name="targetVmName"/>
                        <prop type="string" name="targetVmSize"/>
                        <prop type="object" name="targetVmTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="testNetworkId"/>
                        <prop type="array<object>" name="vmNics">
                          <item type="object">
                            <prop type="string" name="isPrimaryNic"/>
                            <prop type="string" name="isSelectedForMigration"/>
                            <prop readOnly="True" type="string" name="nicId"/>
                            <prop readOnly="True" type="string" name="sourceIPAddress"/>
                            <prop readOnly="True" type="string" name="sourceIPAddressType">
                              <enum>
                                <item value="&quot;Dynamic&quot;"/>
                                <item value="&quot;Static&quot;"/>
                              </enum>
                            </prop>
                            <prop readOnly="True" type="string" name="sourceNetworkId"/>
                            <prop type="string" name="targetIPAddress"/>
                            <prop type="string" name="targetIPAddressType">
                              <enum>
                                <item value="&quot;Dynamic&quot;"/>
                                <item value="&quot;Static&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="targetNicName"/>
                            <prop type="string" name="targetSubnetName"/>
                            <prop type="string" name="testIPAddress"/>
                            <prop type="string" name="testIPAddressType">
                              <enum>
                                <item value="&quot;Dynamic&quot;"/>
                                <item value="&quot;Static&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="testNetworkId"/>
                            <prop type="string" name="testSubnetName"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="string" name="vmwareMachineId"/>
                      </discriminator>
                    </prop>
                    <prop readOnly="True" type="string" name="recoveryServicesProviderId"/>
                    <prop readOnly="True" type="string" name="replicationStatus"/>
                    <prop readOnly="True" type="string" name="testMigrateState">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;TestMigrationCleanupInProgress&quot;"/>
                        <item value="&quot;TestMigrationCompletedWithInformation&quot;"/>
                        <item value="&quot;TestMigrationFailed&quot;"/>
                        <item value="&quot;TestMigrationInProgress&quot;"/>
                        <item value="&quot;TestMigrationPartiallySucceeded&quot;"/>
                        <item value="&quot;TestMigrationSucceeded&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="testMigrateStateDescription"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2022-08-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationprotectioncontainers/{}/replicationmigrationitems/{}" version="2022-08-01" swagger="mgmt-plane/recoveryservicessiterecovery/ResourceProviders/Microsoft.RecoveryServices/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuUmVjb3ZlcnlTZXJ2aWNlcy92YXVsdHMve3Jlc291cmNlTmFtZX0vcmVwbGljYXRpb25GYWJyaWNzL3tmYWJyaWNOYW1lfS9yZXBsaWNhdGlvblByb3RlY3Rpb25Db250YWluZXJzL3twcm90ZWN0aW9uQ29udGFpbmVyTmFtZX0vcmVwbGljYXRpb25NaWdyYXRpb25JdGVtcy97bWlncmF0aW9uSXRlbU5hbWV9/V/MjAyMi0wOC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.fabricName" options="fabric-name" required="True" idPart="child_name_1">
          <help short="Fabric name."/>
        </arg>
        <arg type="string" var="$Path.migrationItemName" options="migration-item-name name n" required="True" idPart="child_name_3">
          <help short="Migration item name."/>
        </arg>
        <arg type="string" var="$Path.protectionContainerName" options="protection-container-name protection-container" required="True" idPart="child_name_2">
          <help short="Protection container name."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.resourceName" options="vault-name" required="True" group="" idPart="name">
          <help short="The name of the recovery services vault."/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        <arg type="string" var="$Query.deleteOption" options="delete-option">
          <help short="The delete option."/>
        </arg>
      </argGroup>
      <operation operationId="ReplicationMigrationItems_Delete">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}">
          <request method="delete">
            <path>
              <param type="string" name="fabricName" arg="$Path.fabricName" required="True"/>
              <param type="string" name="migrationItemName" arg="$Path.migrationItemName" required="True"/>
              <param type="string" name="protectionContainerName" arg="$Path.protectionContainerName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="resourceName" arg="$Path.resourceName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <param type="string" name="deleteOption" arg="$Query.deleteOption"/>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-08-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202"/>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2022-08-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationprotectioncontainers/{}/replicationmigrationitems/{}" version="2022-08-01" swagger="mgmt-plane/recoveryservicessiterecovery/ResourceProviders/Microsoft.RecoveryServices/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuUmVjb3ZlcnlTZXJ2aWNlcy92YXVsdHMve3Jlc291cmNlTmFtZX0vcmVwbGljYXRpb25GYWJyaWNzL3tmYWJyaWNOYW1lfS9yZXBsaWNhdGlvblByb3RlY3Rpb25Db250YWluZXJzL3twcm90ZWN0aW9uQ29udGFpbmVyTmFtZX0vcmVwbGljYXRpb25NaWdyYXRpb25JdGVtcy97bWlncmF0aW9uSXRlbU5hbWV9/V/MjAyMi0wOC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.fabricName" options="fabric-name" required="True" idPart="child_name_1">
          <help short="Fabric name."/>
        </arg>
        <arg type="string" var="$Path.migrationItemName" options="migration-item-name name n" required="True" idPart="child_name_3">
          <help short="Migration item name."/>
        </arg>
        <arg type="string" var="$Path.protectionContainerName" options="protection-container-name protection-container" required="True" idPart="child_name_2">
          <help short="Protection container name."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.resourceName" options="vault-name" required="True" group="" idPart="name">
          <help short="The name of the recovery services vault."/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$input.properties.policyId" options="policy-id" required="True" group="Properties">
          <help short="The policy Id."/>
        </arg>
        <arg type="object" var="$input.properties.providerSpecificDetails" options="provider-specific-details provider-details" required="True" group="Properties">
          <help short="The provider specific details."/>
          <arg type="object" var="$input.properties.providerSpecificDetails.VMwareCbt" options="v-mware-cbt">
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.dataMoverRunAsAccountId" options="data-mover-run-as-account-id" required="True">
              <help short="The data mover run as account Id."/>
            </arg>
            <arg type="array<object>" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude" options="disks-to-include" required="True">
              <help short="The disks to include list."/>
              <format minLength="1"/>
              <item type="object">
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskEncryptionSetId" options="disk-encryption-set-id">
                  <help short="The DiskEncryptionSet ARM Id."/>
                </arg>
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskId" options="disk-id" required="True">
                  <help short="The disk Id."/>
                </arg>
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskType" options="disk-type">
                  <help short="The disk type."/>
                  <enum>
                    <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                    <item name="StandardSSD_LRS" value="&quot;StandardSSD_LRS&quot;"/>
                    <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].isOSDisk" options="is-os-disk" required="True">
                  <help short="A value indicating whether the disk is the OS disk."/>
                </arg>
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].logStorageAccountId" options="log-storage-account-id" required="True">
                  <help short="The log storage account ARM Id."/>
                </arg>
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].logStorageAccountSasSecretName" options="log-storage-account-sas-secret-name" required="True">
                  <help short="The key vault secret name of the log storage account."/>
                </arg>
              </item>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.licenseType" options="license-type">
              <help short="License type."/>
              <enum>
                <item name="NoLicenseType" value="&quot;NoLicenseType&quot;"/>
                <item name="NotSpecified" value="&quot;NotSpecified&quot;"/>
                <item name="WindowsServer" value="&quot;WindowsServer&quot;"/>
              </enum>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.performAutoResync" options="perform-auto-resync">
              <help short="A value indicating whether auto resync is to be done."/>
            </arg>
            <arg type="object" var="$input.properties.providerSpecificDetails.VMwareCbt.seedDiskTags" options="seed-disk-tags">
              <help short="The tags for the seed disks."/>
              <additionalProp>
                <item type="string"/>
              </additionalProp>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.snapshotRunAsAccountId" options="snapshot-run-as-account-id" required="True">
              <help short="The snapshot run as account Id."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.sqlServerLicenseType" options="sql-server-license-type">
              <help short="The SQL Server license type."/>
              <enum>
                <item name="AHUB" value="&quot;AHUB&quot;"/>
                <item name="NoLicenseType" value="&quot;NoLicenseType&quot;"/>
                <item name="NotSpecified" value="&quot;NotSpecified&quot;"/>
                <item name="PAYG" value="&quot;PAYG&quot;"/>
              </enum>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetAvailabilitySetId" options="target-availability-set-id">
              <help short="The target availability set ARM Id."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetAvailabilityZone" options="target-availability-zone">
              <help short="The target availability zone."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetBootDiagnosticsStorageAccountId" options="target-boot-diagnostics-storage-account-id">
              <help short="The target boot diagnostics storage account ARM Id."/>
            </arg>
            <arg type="object" var="$input.properties.providerSpecificDetails.VMwareCbt.targetDiskTags" options="target-disk-tags">
              <help short="The tags for the target disks."/>
              <additionalProp>
                <item type="string"/>
              </additionalProp>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetNetworkId" options="target-network-id" required="True">
              <help short="The target network ARM Id."/>
            </arg>
            <arg type="object" var="$input.properties.providerSpecificDetails.VMwareCbt.targetNicTags" options="target-nic-tags">
              <help short="The tags for the target NICs."/>
              <additionalProp>
                <item type="string"/>
              </additionalProp>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetProximityPlacementGroupId" options="target-proximity-placement-group-id">
              <help short="The target proximity placement group ARM Id."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetResourceGroupId" options="target-resource-group-id" required="True">
              <help short="The target resource group ARM Id."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetSubnetName" options="target-subnet-name">
              <help short="The target subnet name."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetVmName" options="target-vm-name">
              <help short="The target VM name."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetVmSize" options="target-vm-size">
              <help short="The target VM size."/>
            </arg>
            <arg type="object" var="$input.properties.providerSpecificDetails.VMwareCbt.targetVmTags" options="target-vm-tags">
              <help short="The target VM tags."/>
              <additionalProp>
                <item type="string"/>
              </additionalProp>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.testNetworkId" options="test-network-id">
              <help short="The selected test network ARM Id."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.testSubnetName" options="test-subnet-name">
              <help short="The selected test subnet name."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.vmwareMachineId" options="vmware-machine-id" required="True">
              <help short="The ARM Id of the VM discovered in VMware."/>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="ReplicationMigrationItems_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}">
          <request method="put">
            <path>
              <param type="string" name="fabricName" arg="$Path.fabricName" required="True"/>
              <param type="string" name="migrationItemName" arg="$Path.migrationItemName" required="True"/>
              <param type="string" name="protectionContainerName" arg="$Path.protectionContainerName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="resourceName" arg="$Path.resourceName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-08-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="input" required="True" clientFlatten="True">
                  <prop type="object" name="properties" required="True">
                    <prop type="string" name="policyId" arg="$input.properties.policyId" required="True"/>
                    <prop type="object" name="providerSpecificDetails" arg="$input.properties.providerSpecificDetails" required="True">
                      <prop type="string" name="instanceType" required="True">
                        <enum>
                          <item arg="$input.properties.providerSpecificDetails.VMwareCbt" value="&quot;VMwareCbt&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="instanceType" value="VMwareCbt">
                        <prop type="string" name="dataMoverRunAsAccountId" arg="$input.properties.providerSpecificDetails.VMwareCbt.dataMoverRunAsAccountId" required="True"/>
                        <prop type="array<object>" name="disksToInclude" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude" required="True">
                          <format minLength="1"/>
                          <item type="object">
                            <prop type="string" name="diskEncryptionSetId" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskEncryptionSetId"/>
                            <prop type="string" name="diskId" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskId" required="True"/>
                            <prop type="string" name="diskType" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;StandardSSD_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="isOSDisk" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].isOSDisk" required="True"/>
                            <prop type="string" name="logStorageAccountId" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].logStorageAccountId" required="True"/>
                            <prop type="string" name="logStorageAccountSasSecretName" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].logStorageAccountSasSecretName" required="True"/>
                          </item>
                        </prop>
                        <prop type="string" name="licenseType" arg="$input.properties.providerSpecificDetails.VMwareCbt.licenseType">
                          <enum>
                            <item value="&quot;NoLicenseType&quot;"/>
                            <item value="&quot;NotSpecified&quot;"/>
                            <item value="&quot;WindowsServer&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="performAutoResync" arg="$input.properties.providerSpecificDetails.VMwareCbt.performAutoResync"/>
                        <prop type="object" name="seedDiskTags" arg="$input.properties.providerSpecificDetails.VMwareCbt.seedDiskTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="snapshotRunAsAccountId" arg="$input.properties.providerSpecificDetails.VMwareCbt.snapshotRunAsAccountId" required="True"/>
                        <prop type="string" name="sqlServerLicenseType" arg="$input.properties.providerSpecificDetails.VMwareCbt.sqlServerLicenseType">
                          <enum>
                            <item value="&quot;AHUB&quot;"/>
                            <item value="&quot;NoLicenseType&quot;"/>
                            <item value="&quot;NotSpecified&quot;"/>
                            <item value="&quot;PAYG&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="targetAvailabilitySetId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetAvailabilitySetId"/>
                        <prop type="string" name="targetAvailabilityZone" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetAvailabilityZone"/>
                        <prop type="string" name="targetBootDiagnosticsStorageAccountId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetBootDiagnosticsStorageAccountId"/>
                        <prop type="object" name="targetDiskTags" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetDiskTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="targetNetworkId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetNetworkId" required="True"/>
                        <prop type="object" name="targetNicTags" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetNicTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="targetProximityPlacementGroupId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetProximityPlacementGroupId"/>
                        <prop type="string" name="targetResourceGroupId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetResourceGroupId" required="True"/>
                        <prop type="string" name="targetSubnetName" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetSubnetName"/>
                        <prop type="string" name="targetVmName" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetVmName"/>
                        <prop type="string" name="targetVmSize" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetVmSize"/>
                        <prop type="object" name="targetVmTags" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetVmTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="testNetworkId" arg="$input.properties.providerSpecificDetails.VMwareCbt.testNetworkId"/>
                        <prop type="string" name="testSubnetName" arg="$input.properties.providerSpecificDetails.VMwareCbt.testSubnetName"/>
                        <prop type="string" name="vmwareMachineId" arg="$input.properties.providerSpecificDetails.VMwareCbt.vmwareMachineId" required="True"/>
                      </discriminator>
                    </prop>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/replicationFabrics/{}/replicationProtectionContainers/{}/replicationMigrationItems/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop readOnly="True" type="array<string>" name="allowedOperations">
                      <item type="string">
                        <enum>
                          <item value="&quot;DisableMigration&quot;"/>
                          <item value="&quot;Migrate&quot;"/>
                          <item value="&quot;PauseReplication&quot;"/>
                          <item value="&quot;ResumeReplication&quot;"/>
                          <item value="&quot;StartResync&quot;"/>
                          <item value="&quot;TestMigrate&quot;"/>
                          <item value="&quot;TestMigrateCleanup&quot;"/>
                        </enum>
                      </item>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="criticalJobHistory">
                      <item type="object">
                        <prop readOnly="True" type="string" name="jobId"/>
                        <prop readOnly="True" type="string" name="jobName"/>
                        <prop readOnly="True" type="string" name="jobStatus"/>
                        <prop readOnly="True" type="dateTime" name="startTime"/>
                      </item>
                    </prop>
                    <prop type="object" name="currentJob">
                      <prop readOnly="True" type="string" name="jobId"/>
                      <prop readOnly="True" type="string" name="jobName"/>
                      <prop readOnly="True" type="dateTime" name="startTime"/>
                    </prop>
                    <prop readOnly="True" type="string" name="eventCorrelationId"/>
                    <prop readOnly="True" type="string" name="health">
                      <enum>
                        <item value="&quot;Critical&quot;"/>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;Normal&quot;"/>
                        <item value="&quot;Warning&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="healthErrors">
                      <item type="object">
                        <prop type="dateTime" name="creationTimeUtc"/>
                        <prop type="string" name="customerResolvability">
                          <enum>
                            <item value="&quot;Allowed&quot;"/>
                            <item value="&quot;NotAllowed&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="entityId"/>
                        <prop type="string" name="errorCategory"/>
                        <prop type="string" name="errorCode"/>
                        <prop type="string" name="errorId"/>
                        <prop type="string" name="errorLevel"/>
                        <prop type="string" name="errorMessage"/>
                        <prop type="string" name="errorSource"/>
                        <prop type="string" name="errorType"/>
                        <prop type="array<object>" name="innerHealthErrors">
                          <item type="object">
                            <prop type="dateTime" name="creationTimeUtc"/>
                            <prop type="string" name="customerResolvability">
                              <enum>
                                <item value="&quot;Allowed&quot;"/>
                                <item value="&quot;NotAllowed&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="entityId"/>
                            <prop type="string" name="errorCategory"/>
                            <prop type="string" name="errorCode"/>
                            <prop type="string" name="errorId"/>
                            <prop type="string" name="errorLevel"/>
                            <prop type="string" name="errorMessage"/>
                            <prop type="string" name="errorSource"/>
                            <prop type="string" name="errorType"/>
                            <prop type="string" name="possibleCauses"/>
                            <prop type="string" name="recommendedAction"/>
                            <prop type="string" name="recoveryProviderErrorMessage"/>
                            <prop type="string" name="summaryMessage"/>
                          </item>
                        </prop>
                        <prop type="string" name="possibleCauses"/>
                        <prop type="string" name="recommendedAction"/>
                        <prop type="string" name="recoveryProviderErrorMessage"/>
                        <prop type="string" name="summaryMessage"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="lastMigrationStatus"/>
                    <prop readOnly="True" type="dateTime" name="lastMigrationTime"/>
                    <prop readOnly="True" type="string" name="lastTestMigrationStatus"/>
                    <prop readOnly="True" type="dateTime" name="lastTestMigrationTime"/>
                    <prop readOnly="True" type="string" name="machineName"/>
                    <prop readOnly="True" type="string" name="migrationState">
                      <enum>
                        <item value="&quot;DisableMigrationFailed&quot;"/>
                        <item value="&quot;DisableMigrationInProgress&quot;"/>
                        <item value="&quot;EnableMigrationFailed&quot;"/>
                        <item value="&quot;EnableMigrationInProgress&quot;"/>
                        <item value="&quot;InitialSeedingFailed&quot;"/>
                        <item value="&quot;InitialSeedingInProgress&quot;"/>
                        <item value="&quot;MigrationCompletedWithInformation&quot;"/>
                        <item value="&quot;MigrationFailed&quot;"/>
                        <item value="&quot;MigrationInProgress&quot;"/>
                        <item value="&quot;MigrationPartiallySucceeded&quot;"/>
                        <item value="&quot;MigrationSucceeded&quot;"/>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;ProtectionSuspended&quot;"/>
                        <item value="&quot;Replicating&quot;"/>
                        <item value="&quot;ResumeInProgress&quot;"/>
                        <item value="&quot;ResumeInitiated&quot;"/>
                        <item value="&quot;SuspendingProtection&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="migrationStateDescription"/>
                    <prop readOnly="True" type="string" name="policyFriendlyName"/>
                    <prop readOnly="True" type="string" name="policyId"/>
                    <prop type="object" name="providerSpecificDetails">
                      <prop type="string" name="instanceType" required="True">
                        <enum>
                          <item value="&quot;VMwareCbt&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="instanceType" value="VMwareCbt">
                        <prop readOnly="True" type="string" name="dataMoverRunAsAccountId"/>
                        <prop readOnly="True" type="string" name="firmwareType"/>
                        <prop readOnly="True" type="integer32" name="initialSeedingProgressPercentage"/>
                        <prop readOnly="True" type="integer64" name="initialSeedingRetryCount"/>
                        <prop readOnly="True" type="string" name="lastRecoveryPointId"/>
                        <prop readOnly="True" type="dateTime" name="lastRecoveryPointReceived"/>
                        <prop type="string" name="licenseType"/>
                        <prop readOnly="True" type="integer32" name="migrationProgressPercentage"/>
                        <prop readOnly="True" type="string" name="migrationRecoveryPointId"/>
                        <prop readOnly="True" type="string" name="osType"/>
                        <prop type="string" name="performAutoResync"/>
                        <prop type="array<object>" name="protectedDisks">
                          <item type="object">
                            <prop readOnly="True" type="integer64" name="capacityInBytes"/>
                            <prop readOnly="True" type="string" name="diskEncryptionSetId"/>
                            <prop readOnly="True" type="string" name="diskId"/>
                            <prop readOnly="True" type="string" name="diskName"/>
                            <prop readOnly="True" type="string" name="diskPath"/>
                            <prop type="string" name="diskType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;StandardSSD_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                              </enum>
                            </prop>
                            <prop readOnly="True" type="string" name="isOSDisk"/>
                            <prop readOnly="True" type="string" name="logStorageAccountId"/>
                            <prop readOnly="True" type="string" name="logStorageAccountSasSecretName"/>
                            <prop readOnly="True" type="string" name="seedBlobUri"/>
                            <prop readOnly="True" type="string" name="seedManagedDiskId"/>
                            <prop readOnly="True" type="string" name="targetBlobUri"/>
                            <prop type="string" name="targetDiskName"/>
                            <prop readOnly="True" type="string" name="targetManagedDiskId"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="integer32" name="resumeProgressPercentage"/>
                        <prop readOnly="True" type="integer64" name="resumeRetryCount"/>
                        <prop readOnly="True" type="integer32" name="resyncProgressPercentage"/>
                        <prop readOnly="True" type="string" name="resyncRequired"/>
                        <prop readOnly="True" type="integer64" name="resyncRetryCount"/>
                        <prop readOnly="True" type="string" name="resyncState">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;PreparedForResynchronization&quot;"/>
                            <item value="&quot;StartedResynchronization&quot;"/>
                          </enum>
                        </prop>
                        <prop type="object" name="seedDiskTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="snapshotRunAsAccountId"/>
                        <prop type="string" name="sqlServerLicenseType"/>
                        <prop readOnly="True" type="string" name="storageAccountId"/>
                        <prop type="string" name="targetAvailabilitySetId"/>
                        <prop type="string" name="targetAvailabilityZone"/>
                        <prop type="string" name="targetBootDiagnosticsStorageAccountId"/>
                        <prop type="object" name="targetDiskTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="targetGeneration"/>
                        <prop readOnly="True" type="string" name="targetLocation"/>
                        <prop type="string" name="targetNetworkId"/>
                        <prop type="object" name="targetNicTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="targetProximityPlacementGroupId"/>
                        <prop type="string" name="targetResourceGroupId"/>
                        <prop type="string" name="targetVmName"/>
                        <prop type="string" name="targetVmSize"/>
                        <prop type="object" name="targetVmTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="testNetworkId"/>
                        <prop type="array<object>" name="vmNics">
                          <item type="object">
                            <prop type="string" name="isPrimaryNic"/>
                            <prop type="string" name="isSelectedForMigration"/>
                            <prop readOnly="True" type="string" name="nicId"/>
                            <prop readOnly="True" type="string" name="sourceIPAddress"/>
                            <prop readOnly="True" type="string" name="sourceIPAddressType">
                              <enum>
                                <item value="&quot;Dynamic&quot;"/>
                                <item value="&quot;Static&quot;"/>
                              </enum>
                            </prop>
                            <prop readOnly="True" type="string" name="sourceNetworkId"/>
                            <prop type="string" name="targetIPAddress"/>
                            <prop type="string" name="targetIPAddressType">
                              <enum>
                                <item value="&quot;Dynamic&quot;"/>
                                <item value="&quot;Static&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="targetNicName"/>
                            <prop type="string" name="targetSubnetName"/>
                            <prop type="string" name="testIPAddress"/>
                            <prop type="string" name="testIPAddressType">
                              <enum>
                                <item value="&quot;Dynamic&quot;"/>
                                <item value="&quot;Static&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="testNetworkId"/>
                            <prop type="string" name="testSubnetName"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="string" name="vmwareMachineId"/>
                      </discriminator>
                    </prop>
                    <prop readOnly="True" type="string" name="recoveryServicesProviderId"/>
                    <prop readOnly="True" type="string" name="replicationStatus"/>
                    <prop readOnly="True" type="string" name="testMigrateState">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;TestMigrationCleanupInProgress&quot;"/>
                        <item value="&quot;TestMigrationCompletedWithInformation&quot;"/>
                        <item value="&quot;TestMigrationFailed&quot;"/>
                        <item value="&quot;TestMigrationInProgress&quot;"/>
                        <item value="&quot;TestMigrationPartiallySucceeded&quot;"/>
                        <item value="&quot;TestMigrationSucceeded&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="testMigrateStateDescription"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2022-08-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationprotectioncontainers/{}/replicationmigrationitems/{}" version="2022-08-01" swagger="mgmt-plane/recoveryservicessiterecovery/ResourceProviders/Microsoft.RecoveryServices/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuUmVjb3ZlcnlTZXJ2aWNlcy92YXVsdHMve3Jlc291cmNlTmFtZX0vcmVwbGljYXRpb25GYWJyaWNzL3tmYWJyaWNOYW1lfS9yZXBsaWNhdGlvblByb3RlY3Rpb25Db250YWluZXJzL3twcm90ZWN0aW9uQ29udGFpbmVyTmFtZX0vcmVwbGljYXRpb25NaWdyYXRpb25JdGVtcy97bWlncmF0aW9uSXRlbU5hbWV9/V/MjAyMi0wOC0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.fabricName" options="fabric-name" required="True" idPart="child_name_1">
          <help short="Fabric unique name."/>
        </arg>
        <arg type="string" var="$Path.migrationItemName" options="migration-item-name name n" required="True" idPart="child_name_3">
          <help short="Migration item name."/>
        </arg>
        <arg type="string" var="$Path.protectionContainerName" options="protection-container-name protection-container" required="True" idPart="child_name_2">
          <help short="Protection container name."/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="string" var="$Path.resourceName" options="vault-name" required="True" group="" idPart="name">
          <help short="The name of the recovery services vault."/>
        </arg>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Properties">
        <arg type="string" var="$input.properties.policyId" options="policy-id" group="Properties">
          <help short="The policy Id."/>
        </arg>
        <arg type="object" var="$input.properties.providerSpecificDetails" options="provider-specific-details provider-details" group="Properties">
          <help short="The provider specific details."/>
          <arg type="object" var="$input.properties.providerSpecificDetails.VMwareCbt" options="v-mware-cbt">
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.dataMoverRunAsAccountId" options="data-mover-run-as-account-id">
              <help short="The data mover run as account Id."/>
            </arg>
            <arg type="array<object>" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude" options="disks-to-include">
              <help short="The disks to include list."/>
              <format minLength="1"/>
              <item nullable="True" type="object">
                <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskEncryptionSetId" options="disk-encryption-set-id">
                  <help short="The DiskEncryptionSet ARM Id."/>
                </arg>
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskId" options="disk-id">
                  <help short="The disk Id."/>
                </arg>
                <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskType" options="disk-type">
                  <help short="The disk type."/>
                  <enum>
                    <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                    <item name="StandardSSD_LRS" value="&quot;StandardSSD_LRS&quot;"/>
                    <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].isOSDisk" options="is-os-disk">
                  <help short="A value indicating whether the disk is the OS disk."/>
                </arg>
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].logStorageAccountId" options="log-storage-account-id">
                  <help short="The log storage account ARM Id."/>
                </arg>
                <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].logStorageAccountSasSecretName" options="log-storage-account-sas-secret-name">
                  <help short="The key vault secret name of the log storage account."/>
                </arg>
              </item>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.licenseType" options="license-type">
              <help short="License type."/>
              <enum>
                <item name="NoLicenseType" value="&quot;NoLicenseType&quot;"/>
                <item name="NotSpecified" value="&quot;NotSpecified&quot;"/>
                <item name="WindowsServer" value="&quot;WindowsServer&quot;"/>
              </enum>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.performAutoResync" options="perform-auto-resync">
              <help short="A value indicating whether auto resync is to be done."/>
            </arg>
            <arg nullable="True" type="object" var="$input.properties.providerSpecificDetails.VMwareCbt.seedDiskTags" options="seed-disk-tags">
              <help short="The tags for the seed disks."/>
              <additionalProp>
                <item nullable="True" type="string"/>
              </additionalProp>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.snapshotRunAsAccountId" options="snapshot-run-as-account-id">
              <help short="The snapshot run as account Id."/>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.sqlServerLicenseType" options="sql-server-license-type">
              <help short="The SQL Server license type."/>
              <enum>
                <item name="AHUB" value="&quot;AHUB&quot;"/>
                <item name="NoLicenseType" value="&quot;NoLicenseType&quot;"/>
                <item name="NotSpecified" value="&quot;NotSpecified&quot;"/>
                <item name="PAYG" value="&quot;PAYG&quot;"/>
              </enum>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetAvailabilitySetId" options="target-availability-set-id">
              <help short="The target availability set ARM Id."/>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetAvailabilityZone" options="target-availability-zone">
              <help short="The target availability zone."/>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetBootDiagnosticsStorageAccountId" options="target-boot-diagnostics-storage-account-id">
              <help short="The target boot diagnostics storage account ARM Id."/>
            </arg>
            <arg nullable="True" type="object" var="$input.properties.providerSpecificDetails.VMwareCbt.targetDiskTags" options="target-disk-tags">
              <help short="The tags for the target disks."/>
              <additionalProp>
                <item nullable="True" type="string"/>
              </additionalProp>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetNetworkId" options="target-network-id">
              <help short="The target network ARM Id."/>
            </arg>
            <arg nullable="True" type="object" var="$input.properties.providerSpecificDetails.VMwareCbt.targetNicTags" options="target-nic-tags">
              <help short="The tags for the target NICs."/>
              <additionalProp>
                <item nullable="True" type="string"/>
              </additionalProp>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetProximityPlacementGroupId" options="target-proximity-placement-group-id">
              <help short="The target proximity placement group ARM Id."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetResourceGroupId" options="target-resource-group-id">
              <help short="The target resource group ARM Id."/>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetSubnetName" options="target-subnet-name">
              <help short="The target subnet name."/>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetVmName" options="target-vm-name">
              <help short="The target VM name."/>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.targetVmSize" options="target-vm-size">
              <help short="The target VM size."/>
            </arg>
            <arg nullable="True" type="object" var="$input.properties.providerSpecificDetails.VMwareCbt.targetVmTags" options="target-vm-tags">
              <help short="The target VM tags."/>
              <additionalProp>
                <item nullable="True" type="string"/>
              </additionalProp>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.testNetworkId" options="test-network-id">
              <help short="The selected test network ARM Id."/>
            </arg>
            <arg nullable="True" type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.testSubnetName" options="test-subnet-name">
              <help short="The selected test subnet name."/>
            </arg>
            <arg type="string" var="$input.properties.providerSpecificDetails.VMwareCbt.vmwareMachineId" options="vmware-machine-id">
              <help short="The ARM Id of the VM discovered in VMware."/>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="ReplicationMigrationItems_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}">
          <request method="get">
            <path>
              <param type="string" name="fabricName" arg="$Path.fabricName" required="True"/>
              <param type="string" name="migrationItemName" arg="$Path.migrationItemName" required="True"/>
              <param type="string" name="protectionContainerName" arg="$Path.protectionContainerName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="resourceName" arg="$Path.resourceName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-08-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="MigrationItem_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.RecoveryServices/vaults/{}/replicationFabrics/{}/replicationProtectionContainers/{}/replicationMigrationItems/{}"/>
                  </prop>
                  <prop type="ResourceLocation" name="location"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties">
                    <prop readOnly="True" type="array<string>" name="allowedOperations">
                      <item type="string">
                        <enum>
                          <item value="&quot;DisableMigration&quot;"/>
                          <item value="&quot;Migrate&quot;"/>
                          <item value="&quot;PauseReplication&quot;"/>
                          <item value="&quot;ResumeReplication&quot;"/>
                          <item value="&quot;StartResync&quot;"/>
                          <item value="&quot;TestMigrate&quot;"/>
                          <item value="&quot;TestMigrateCleanup&quot;"/>
                        </enum>
                      </item>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="criticalJobHistory">
                      <item type="object">
                        <prop readOnly="True" type="string" name="jobId"/>
                        <prop readOnly="True" type="string" name="jobName"/>
                        <prop readOnly="True" type="string" name="jobStatus"/>
                        <prop readOnly="True" type="dateTime" name="startTime"/>
                      </item>
                    </prop>
                    <prop type="object" name="currentJob">
                      <prop readOnly="True" type="string" name="jobId"/>
                      <prop readOnly="True" type="string" name="jobName"/>
                      <prop readOnly="True" type="dateTime" name="startTime"/>
                    </prop>
                    <prop readOnly="True" type="string" name="eventCorrelationId"/>
                    <prop readOnly="True" type="string" name="health">
                      <enum>
                        <item value="&quot;Critical&quot;"/>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;Normal&quot;"/>
                        <item value="&quot;Warning&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="array<object>" name="healthErrors">
                      <item type="object">
                        <prop type="dateTime" name="creationTimeUtc"/>
                        <prop type="string" name="customerResolvability">
                          <enum>
                            <item value="&quot;Allowed&quot;"/>
                            <item value="&quot;NotAllowed&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="entityId"/>
                        <prop type="string" name="errorCategory"/>
                        <prop type="string" name="errorCode"/>
                        <prop type="string" name="errorId"/>
                        <prop type="string" name="errorLevel"/>
                        <prop type="string" name="errorMessage"/>
                        <prop type="string" name="errorSource"/>
                        <prop type="string" name="errorType"/>
                        <prop type="array<object>" name="innerHealthErrors">
                          <item type="object">
                            <prop type="dateTime" name="creationTimeUtc"/>
                            <prop type="string" name="customerResolvability">
                              <enum>
                                <item value="&quot;Allowed&quot;"/>
                                <item value="&quot;NotAllowed&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="entityId"/>
                            <prop type="string" name="errorCategory"/>
                            <prop type="string" name="errorCode"/>
                            <prop type="string" name="errorId"/>
                            <prop type="string" name="errorLevel"/>
                            <prop type="string" name="errorMessage"/>
                            <prop type="string" name="errorSource"/>
                            <prop type="string" name="errorType"/>
                            <prop type="string" name="possibleCauses"/>
                            <prop type="string" name="recommendedAction"/>
                            <prop type="string" name="recoveryProviderErrorMessage"/>
                            <prop type="string" name="summaryMessage"/>
                          </item>
                        </prop>
                        <prop type="string" name="possibleCauses"/>
                        <prop type="string" name="recommendedAction"/>
                        <prop type="string" name="recoveryProviderErrorMessage"/>
                        <prop type="string" name="summaryMessage"/>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="lastMigrationStatus"/>
                    <prop readOnly="True" type="dateTime" name="lastMigrationTime"/>
                    <prop readOnly="True" type="string" name="lastTestMigrationStatus"/>
                    <prop readOnly="True" type="dateTime" name="lastTestMigrationTime"/>
                    <prop readOnly="True" type="string" name="machineName"/>
                    <prop readOnly="True" type="string" name="migrationState">
                      <enum>
                        <item value="&quot;DisableMigrationFailed&quot;"/>
                        <item value="&quot;DisableMigrationInProgress&quot;"/>
                        <item value="&quot;EnableMigrationFailed&quot;"/>
                        <item value="&quot;EnableMigrationInProgress&quot;"/>
                        <item value="&quot;InitialSeedingFailed&quot;"/>
                        <item value="&quot;InitialSeedingInProgress&quot;"/>
                        <item value="&quot;MigrationCompletedWithInformation&quot;"/>
                        <item value="&quot;MigrationFailed&quot;"/>
                        <item value="&quot;MigrationInProgress&quot;"/>
                        <item value="&quot;MigrationPartiallySucceeded&quot;"/>
                        <item value="&quot;MigrationSucceeded&quot;"/>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;ProtectionSuspended&quot;"/>
                        <item value="&quot;Replicating&quot;"/>
                        <item value="&quot;ResumeInProgress&quot;"/>
                        <item value="&quot;ResumeInitiated&quot;"/>
                        <item value="&quot;SuspendingProtection&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="migrationStateDescription"/>
                    <prop readOnly="True" type="string" name="policyFriendlyName"/>
                    <prop readOnly="True" type="string" name="policyId"/>
                    <prop type="object" name="providerSpecificDetails">
                      <prop type="string" name="instanceType" required="True">
                        <enum>
                          <item value="&quot;VMwareCbt&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="instanceType" value="VMwareCbt">
                        <prop readOnly="True" type="string" name="dataMoverRunAsAccountId"/>
                        <prop readOnly="True" type="string" name="firmwareType"/>
                        <prop readOnly="True" type="integer32" name="initialSeedingProgressPercentage"/>
                        <prop readOnly="True" type="integer64" name="initialSeedingRetryCount"/>
                        <prop readOnly="True" type="string" name="lastRecoveryPointId"/>
                        <prop readOnly="True" type="dateTime" name="lastRecoveryPointReceived"/>
                        <prop type="string" name="licenseType"/>
                        <prop readOnly="True" type="integer32" name="migrationProgressPercentage"/>
                        <prop readOnly="True" type="string" name="migrationRecoveryPointId"/>
                        <prop readOnly="True" type="string" name="osType"/>
                        <prop type="string" name="performAutoResync"/>
                        <prop type="array<object>" name="protectedDisks">
                          <item type="object">
                            <prop readOnly="True" type="integer64" name="capacityInBytes"/>
                            <prop readOnly="True" type="string" name="diskEncryptionSetId"/>
                            <prop readOnly="True" type="string" name="diskId"/>
                            <prop readOnly="True" type="string" name="diskName"/>
                            <prop readOnly="True" type="string" name="diskPath"/>
                            <prop type="string" name="diskType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;StandardSSD_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                              </enum>
                            </prop>
                            <prop readOnly="True" type="string" name="isOSDisk"/>
                            <prop readOnly="True" type="string" name="logStorageAccountId"/>
                            <prop readOnly="True" type="string" name="logStorageAccountSasSecretName"/>
                            <prop readOnly="True" type="string" name="seedBlobUri"/>
                            <prop readOnly="True" type="string" name="seedManagedDiskId"/>
                            <prop readOnly="True" type="string" name="targetBlobUri"/>
                            <prop type="string" name="targetDiskName"/>
                            <prop readOnly="True" type="string" name="targetManagedDiskId"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="integer32" name="resumeProgressPercentage"/>
                        <prop readOnly="True" type="integer64" name="resumeRetryCount"/>
                        <prop readOnly="True" type="integer32" name="resyncProgressPercentage"/>
                        <prop readOnly="True" type="string" name="resyncRequired"/>
                        <prop readOnly="True" type="integer64" name="resyncRetryCount"/>
                        <prop readOnly="True" type="string" name="resyncState">
                          <enum>
                            <item value="&quot;None&quot;"/>
                            <item value="&quot;PreparedForResynchronization&quot;"/>
                            <item value="&quot;StartedResynchronization&quot;"/>
                          </enum>
                        </prop>
                        <prop type="object" name="seedDiskTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="snapshotRunAsAccountId"/>
                        <prop type="string" name="sqlServerLicenseType"/>
                        <prop readOnly="True" type="string" name="storageAccountId"/>
                        <prop type="string" name="targetAvailabilitySetId"/>
                        <prop type="string" name="targetAvailabilityZone"/>
                        <prop type="string" name="targetBootDiagnosticsStorageAccountId"/>
                        <prop type="object" name="targetDiskTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop readOnly="True" type="string" name="targetGeneration"/>
                        <prop readOnly="True" type="string" name="targetLocation"/>
                        <prop type="string" name="targetNetworkId"/>
                        <prop type="object" name="targetNicTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="targetProximityPlacementGroupId"/>
                        <prop type="string" name="targetResourceGroupId"/>
                        <prop type="string" name="targetVmName"/>
                        <prop type="string" name="targetVmSize"/>
                        <prop type="object" name="targetVmTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="testNetworkId"/>
                        <prop type="array<object>" name="vmNics">
                          <item type="object">
                            <prop type="string" name="isPrimaryNic"/>
                            <prop type="string" name="isSelectedForMigration"/>
                            <prop readOnly="True" type="string" name="nicId"/>
                            <prop readOnly="True" type="string" name="sourceIPAddress"/>
                            <prop readOnly="True" type="string" name="sourceIPAddressType">
                              <enum>
                                <item value="&quot;Dynamic&quot;"/>
                                <item value="&quot;Static&quot;"/>
                              </enum>
                            </prop>
                            <prop readOnly="True" type="string" name="sourceNetworkId"/>
                            <prop type="string" name="targetIPAddress"/>
                            <prop type="string" name="targetIPAddressType">
                              <enum>
                                <item value="&quot;Dynamic&quot;"/>
                                <item value="&quot;Static&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="targetNicName"/>
                            <prop type="string" name="targetSubnetName"/>
                            <prop type="string" name="testIPAddress"/>
                            <prop type="string" name="testIPAddressType">
                              <enum>
                                <item value="&quot;Dynamic&quot;"/>
                                <item value="&quot;Static&quot;"/>
                              </enum>
                            </prop>
                            <prop type="string" name="testNetworkId"/>
                            <prop type="string" name="testSubnetName"/>
                          </item>
                        </prop>
                        <prop readOnly="True" type="string" name="vmwareMachineId"/>
                      </discriminator>
                    </prop>
                    <prop readOnly="True" type="string" name="recoveryServicesProviderId"/>
                    <prop readOnly="True" type="string" name="replicationStatus"/>
                    <prop readOnly="True" type="string" name="testMigrateState">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;TestMigrationCleanupInProgress&quot;"/>
                        <item value="&quot;TestMigrationCompletedWithInformation&quot;"/>
                        <item value="&quot;TestMigrationFailed&quot;"/>
                        <item value="&quot;TestMigrationInProgress&quot;"/>
                        <item value="&quot;TestMigrationPartiallySucceeded&quot;"/>
                        <item value="&quot;TestMigrationSucceeded&quot;"/>
                      </enum>
                    </prop>
                    <prop readOnly="True" type="string" name="testMigrateStateDescription"/>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="input" required="True" clientFlatten="True">
              <prop type="object" name="properties" required="True">
                <prop type="string" name="policyId" arg="$input.properties.policyId" required="True"/>
                <prop type="object" name="providerSpecificDetails" arg="$input.properties.providerSpecificDetails" required="True">
                  <prop type="string" name="instanceType" required="True">
                    <enum>
                      <item arg="$input.properties.providerSpecificDetails.VMwareCbt" value="&quot;VMwareCbt&quot;"/>
                    </enum>
                  </prop>
                  <discriminator property="instanceType" value="VMwareCbt">
                    <prop type="string" name="dataMoverRunAsAccountId" arg="$input.properties.providerSpecificDetails.VMwareCbt.dataMoverRunAsAccountId" required="True"/>
                    <prop type="array<object>" name="disksToInclude" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude" required="True">
                      <format minLength="1"/>
                      <item type="object">
                        <prop type="string" name="diskEncryptionSetId" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskEncryptionSetId"/>
                        <prop type="string" name="diskId" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskId" required="True"/>
                        <prop type="string" name="diskType" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].diskType">
                          <enum>
                            <item value="&quot;Premium_LRS&quot;"/>
                            <item value="&quot;StandardSSD_LRS&quot;"/>
                            <item value="&quot;Standard_LRS&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="isOSDisk" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].isOSDisk" required="True"/>
                        <prop type="string" name="logStorageAccountId" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].logStorageAccountId" required="True"/>
                        <prop type="string" name="logStorageAccountSasSecretName" arg="$input.properties.providerSpecificDetails.VMwareCbt.disksToInclude[].logStorageAccountSasSecretName" required="True"/>
                      </item>
                    </prop>
                    <prop type="string" name="licenseType" arg="$input.properties.providerSpecificDetails.VMwareCbt.licenseType">
                      <enum>
                        <item value="&quot;NoLicenseType&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;WindowsServer&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="performAutoResync" arg="$input.properties.providerSpecificDetails.VMwareCbt.performAutoResync"/>
                    <prop type="object" name="seedDiskTags" arg="$input.properties.providerSpecificDetails.VMwareCbt.seedDiskTags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="snapshotRunAsAccountId" arg="$input.properties.providerSpecificDetails.VMwareCbt.snapshotRunAsAccountId" required="True"/>
                    <prop type="string" name="sqlServerLicenseType" arg="$input.properties.providerSpecificDetails.VMwareCbt.sqlServerLicenseType">
                      <enum>
                        <item value="&quot;AHUB&quot;"/>
                        <item value="&quot;NoLicenseType&quot;"/>
                        <item value="&quot;NotSpecified&quot;"/>
                        <item value="&quot;PAYG&quot;"/>
                      </enum>
                    </prop>
                    <prop type="string" name="targetAvailabilitySetId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetAvailabilitySetId"/>
                    <prop type="string" name="targetAvailabilityZone" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetAvailabilityZone"/>
                    <prop type="string" name="targetBootDiagnosticsStorageAccountId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetBootDiagnosticsStorageAccountId"/>
                    <prop type="object" name="targetDiskTags" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetDiskTags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="targetNetworkId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetNetworkId" required="True"/>
                    <prop type="object" name="targetNicTags" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetNicTags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="targetProximityPlacementGroupId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetProximityPlacementGroupId"/>
                    <prop type="string" name="targetResourceGroupId" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetResourceGroupId" required="True"/>
                    <prop type="string" name="targetSubnetName" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetSubnetName"/>
                    <prop type="string" name="targetVmName" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetVmName"/>
                    <prop type="string" name="targetVmSize" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetVmSize"/>
                    <prop type="object" name="targetVmTags" arg="$input.properties.providerSpecificDetails.VMwareCbt.targetVmTags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="testNetworkId" arg="$input.properties.providerSpecificDetails.VMwareCbt.testNetworkId"/>
                    <prop type="string" name="testSubnetName" arg="$input.properties.providerSpecificDetails.VMwareCbt.testSubnetName"/>
                    <prop type="string" name="vmwareMachineId" arg="$input.properties.providerSpecificDetails.VMwareCbt.vmwareMachineId" required="True"/>
                  </discriminator>
                </prop>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="ReplicationMigrationItems_Create">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}">
          <request method="put">
            <path>
              <param type="string" name="fabricName" arg="$Path.fabricName" required="True"/>
              <param type="string" name="migrationItemName" arg="$Path.migrationItemName" required="True"/>
              <param type="string" name="protectionContainerName" arg="$Path.protectionContainerName" required="True"/>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="resourceName" arg="$Path.resourceName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-08-01&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="@MigrationItem_read"/>
              </json>
            </body>
          </response>
          <response statusCode="202"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
